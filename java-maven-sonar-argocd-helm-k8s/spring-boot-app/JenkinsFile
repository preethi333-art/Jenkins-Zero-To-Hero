pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  environment {
    DOCKER_IMAGE = "preethi993/spring-boot:${BUILD_NUMBER}"
    DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
    REGISTRY_CREDENTIALS = credentials('docker-cred')
    ECR_REPOSITORY = 'frissly'
    AWS_ACCOUNT_ID = '528757822483'
    AWS_REGION = 'us-east-1'
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Build and Push Docker Image') {
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          sh 'echo $USER'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Create ECR Repository if Not Exists') {
      steps {
        script {
          sh '''
            echo "Checking if ECR repository exists..."
            if ! aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} > /dev/null 2>&1; then
              echo "ECR repository does not exist. Creating..."
              aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION}
            else
              echo "ECR repository already exists."
            fi
          '''
        }
      }
    }
    stage('Push Into ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credentials_ID']]) {
          script {
            def ecrImage = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
            sh """
              echo "Logging into AWS ECR..."
              aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
              
              echo "Checking if Docker image exists..."
              docker images | grep ${DOCKER_IMAGE} || exit 1
              
              echo "Tagging Docker image for ECR..."
              docker tag ${DOCKER_IMAGE} ${ecrImage}
              
              echo "Pushing Docker image to AWS ECR..."
              docker push ${ecrImage}
            """
          }
        }
      }
    }
  }
}
