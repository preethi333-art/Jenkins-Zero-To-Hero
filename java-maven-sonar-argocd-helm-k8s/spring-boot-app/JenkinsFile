pipeline {
  agent any
  tools {
    maven 'maven'
  }
  environment {
    DOCKER_IMAGE = "preethi993/spring-boot:${BUILD_NUMBER}"
    DOCKER_IMAGE1 = "swiggy"
    DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
    REGISTRY_CREDENTIALS = credentials('docker-cred')
    ECR_REPOSITORY = 'frissly'
    AWS_ACCOUNT_ID = '528757822483'
    AWS_REGION = 'us-east-1'
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.90.248.220:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE1} .'
          sh 'echo $USER'
          }
        }
      }
    }

    stage('Push Into ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credetilas_id']]) {
          sh '''
            # Login to AWS ECR
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            
            # Check if the image exists locally
            docker images | grep ${DOCKER_IMAGE1}
            
            # Tag the Docker image with the correct ECR repository
            docker tag ${DOCKER_IMAGE1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest
            
            # Push the Docker image to ECR
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest
          '''
        }
      }
    }
  }
}
